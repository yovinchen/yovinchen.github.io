<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>依赖注入</title>
      <link href="/2022/043031381.html"/>
      <url>/2022/043031381.html</url>
      
        <content type="html"><![CDATA[<h2 id="四、依赖注入"><a href="#四、依赖注入" class="headerlink" title="四、依赖注入"></a>四、依赖注入</h2><p>依赖注入（Dependency Injection）建成DI，与控制反转（IoC）的含义相同</p><p>依赖注入的作用就是在使用Spring 框架创建对象时，动态地将其所依赖的对象注入Bean组件中，其实现方式通常有两种，一种是属性setter方法注入，另一种是构造方法注入，具体介绍如下:</p><p>属性 setter方法注入：指Spring容器使用setter方法注入被依赖的实例。通过调用无参构造器或无参静态工厂方法实例化 Bean后，调用该Bean的setter 方法，即可实现基于 setter方法的依赖注入。</p><p>构造方法注入：指Spring容器使用构造方法注入被依赖的实例。基于构造方法的依赖注入通过调用带参数的构造方法来实现，每个参数代表着一个依赖。</p><p>在com.gzh的包下创建UserService接口并创建一个say方法，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在com.gzh的包下创建UserServiceImpl实现类，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//声明UserDao的属性</span>    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加UserDao属性的setter方法，用于实现依赖注入</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserDao</span><span class="token punctuation">(</span>UserDao userDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//实现接口中的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用userDao中的say()方法，并执行输出语句</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserService say Hellow World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在applicationContext.xml里面创建一个id为userService的实例</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.gzh.UserServiceImpl"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    将id为userDao的Bean实例注入到userService的实例中<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"userDao"</span> ref<span class="token operator">=</span><span class="token string">"userDao"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><p>在com.gzh下创建TestDI实例</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TsetDI</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.初始化Spring容器，加载配置文件</span>        ApplicationContext applicationContext <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.通过容器获取UserService实例</span>        UserService userService <span class="token operator">=</span><span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.调用实例中的say()方法</span>        userService<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://yovinchen-1308133012.cos.ap-beijing.myqcloud.com/image-20220303222001817.png" alt="image-20220303222001817"></p><h2 id="1-IOC（控制反转）：类对象的创建由程序员转给了Spring框架"><a href="#1-IOC（控制反转）：类对象的创建由程序员转给了Spring框架" class="headerlink" title="1.IOC（控制反转）：类对象的创建由程序员转给了Spring框架"></a>1.IOC（控制反转）：类对象的创建由程序员转给了Spring框架</h2><p>Spring框架创建类对象的步骤：</p><p>（1）导包5个</p><p>commons_logging</p><p>spring-context</p><p>spring-beans</p><p>spring-core</p><p>spring-expression</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>context<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">4.3</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>（2）resources文件夹下创建applicationContext.xml</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userDao"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.gzh.UserDaoImpl"</span><span class="token operator">/</span><span class="token operator">></span></code></pre><p>（3）获取Spring框架创建的类对象</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//使用Spring框架创建对象调用方法</span>ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UserDao userDao <span class="token operator">=</span> <span class="token punctuation">(</span>UserDao<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userDao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userDao<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="2-DI：依赖注入"><a href="#2-DI：依赖注入" class="headerlink" title="2.DI：依赖注入"></a>2.DI：依赖注入</h2><p>D：依赖（动词）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    B b<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        b<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//类的对象作为A类的成员变量，就是A依赖B。</span></code></pre><p>I：注入：就是给成员变量赋值</p><p>Spring 框架如何实现依赖注入？</p><p>直接在配置文件中写如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.gzh.UserServiceImpl"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    将id为userDao的Bean实例注入到userService的实例中<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"userDao"</span> ref<span class="token operator">=</span><span class="token string">"userDao"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token comment" spellcheck="true">//name属性值是成员变量，ref属性值是id属性的值</span></code></pre><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring的基本应用</title>
      <link href="/2022/042920479.html"/>
      <url>/2022/042920479.html</url>
      
        <content type="html"><![CDATA[<h1 id="2021版："><a href="#2021版：" class="headerlink" title="2021版："></a>2021版：</h1><h2 id="Spring的基本应用"><a href="#Spring的基本应用" class="headerlink" title="Spring的基本应用"></a>Spring的基本应用</h2><h3 id="一、idea创建maven项目的过程"><a href="#一、idea创建maven项目的过程" class="headerlink" title="一、idea创建maven项目的过程"></a>一、idea创建maven项目的过程</h3><h4 id="1-设置idea打开时欢迎页面"><a href="#1-设置idea打开时欢迎页面" class="headerlink" title="1.设置idea打开时欢迎页面"></a>1.设置idea打开时欢迎页面</h4><p>1.在idea的欢迎页面中点击 Customize 进入自定义设置</p><p>2.点击 settings 进入系统设置</p><p><img src="https://yovinchen-1308133012.cos.ap-beijing.myqcloud.com/image-20220301163353065.png" alt="image-20220301163353065"></p><p>3.在 settings 中搜索System Settings 并点击</p><p>4.将 Project 中的 Reopen projects on satrtup 对勾取消</p><p>5.将下面的 NEW windows 勾选上</p><p><img src="https://yovinchen-1308133012.cos.ap-beijing.myqcloud.com/image-20220301163856266.png" alt="image-20220301163856266"></p><p>即可完成设置欢迎页面。</p><h4 id="2-idea中创建Maven项目的过程"><a href="#2-idea中创建Maven项目的过程" class="headerlink" title="2.idea中创建Maven项目的过程"></a>2.idea中创建Maven项目的过程</h4><p>1.打开欢迎页面中的设置（同上面设置）</p><p>2.再设置中搜索 Maven 并进入</p><p>3.按照图中箭头顺序2更换 apache-maven -3.6.3路径（最好将下载的maven文件解压到除C盘以外的根目录，文件可以在群里下载也可点击此下载）</p><p>4.根据箭头3重写 User settings filer 和 Local repository 的路径（官网下载的maven无repository文件夹，需要自己新建并重命名，更改成和照片相同位置即可）点击OK，完成设置。</p><p><img src="https://yovinchen-1308133012.cos.ap-beijing.myqcloud.com/image-20220301164904720.png" alt="image-20220301164904720"></p><p>5.修改文件maven—conf—setting.xml，用记事本打开文件setting.xml，在其中搜索mirrors节点，找到如图代码区域其中蓝色部分是已经添加的代码，（添加阿里云下载镜像）（注意要添加在<mirrors>和</mirrors>两个标签之间，其它配置同理）代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>mirror<span class="token operator">></span>      <span class="token operator">&lt;</span>id<span class="token operator">></span>alimaven<span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>      <span class="token operator">&lt;</span>name<span class="token operator">></span>aliyun maven<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>      <span class="token operator">&lt;</span>url<span class="token operator">></span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>nexus<span class="token operator">/</span>content<span class="token operator">/</span>groups<span class="token operator">/</span><span class="token keyword">public</span><span class="token operator">/</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">></span>      <span class="token operator">&lt;</span>mirrorOf<span class="token operator">></span>central<span class="token operator">&lt;</span><span class="token operator">/</span>mirrorOf<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>mirror<span class="token operator">></span></code></pre><p><img src="https://yovinchen-1308133012.cos.ap-beijing.myqcloud.com/image-20220302110623820.png" alt="image-20220302110623820"></p><p>6.搜索 localRepository 将其中路径改为自己仓库位置（蓝色部分，官网下载的maven无repository文件夹，需要自己新建并重命名），保存完成修改。</p><p><img src="https://yovinchen-1308133012.cos.ap-beijing.myqcloud.com/image-20220301170612258.png" alt="image-20220301170612258"></p><p>7.创建maven项目的过程，按照顺序依次选择点击最后next结束</p><p><img src="https://yovinchen-1308133012.cos.ap-beijing.myqcloud.com/image-20220301171039307.png" alt="image-20220301171039307"></p><p>8.其中1是项目名称c01，2.是项目存储路径，3.Groupld是项目名com.gzh(自己名字缩写)，4.是版本号不用修改</p><p><img src="https://yovinchen-1308133012.cos.ap-beijing.myqcloud.com/image-20220302110722790.png" alt="image-20220302110722790"></p><p>9.这里应该是之前设置的默认项(如果不是如图所示应该重复上面的步骤进行maven配置)，点击finish完成创建。</p><p><img src="https://yovinchen-1308133012.cos.ap-beijing.myqcloud.com/image-20220301171713956.png" alt="image-20220301171713956"></p><p>10.进入后会自动安装maven的文件，出现如图所示即安装成功</p><p><img src="https://yovinchen-1308133012.cos.ap-beijing.myqcloud.com/image-20220301172210713.png" alt="image-20220301172210713"></p><h3 id="二、Spring的体系结构"><a href="#二、Spring的体系结构" class="headerlink" title="二、Spring的体系结构"></a>二、Spring的体系结构</h3><h4 id="1、核心模块-CoreContainer"><a href="#1、核心模块-CoreContainer" class="headerlink" title="1、核心模块(CoreContainer)"></a>1、核心模块(CoreContainer)</h4><p>Spring核心模块包含有Core、Beans、Context和Expression Language四个小模块。其中，Core和Beans是整个Spring框架基础部分，也是Spring的核心依赖注入loC与DI的最基本实现，Spring的其他模块大多依赖这两个功能。</p><p>spring-core：其他模块的基础核心，包含Spring框架的核心工具类，Spring其他模块都要使用该包里面的类。</p><p>spring-beans:Spring定义bean的支持，负责访问配置文件、创建和管理bean，支持依赖注入和控制反转的相关操作。传说中的bean工厂类就在这个jar包中。</p><p>spring-context:spring运行时容器，在Core和Beans的基础上，提供对Spring的上下文支持，ApplicationContext是该包的关键，通过它，可以方便快捷的取出依赖注入的Bean。</p><p>spring-expression:spring表达式语言，帮助Spring在运行时查询和操作对象。支持设置获取对象的属性值，方法的调用</p><h4 id="2、AOP模块"><a href="#2、AOP模块" class="headerlink" title="2、AOP模块"></a>2、AOP模块</h4><p>spring-aop：对于代理AOP的支持</p><p>spring-Aspects：对于AspectJ的AOP支持</p><h4 id="3、Web模块"><a href="#3、Web模块" class="headerlink" title="3、Web模块"></a>3、Web模块</h4><p>spring-web：提供基础的web功能，在Web项目中提供Spring的容器</p><p>spring-webmvc：提供基于Servlet的SpringMVC</p><p>Spring-WebSocket：提供WebSocket功能</p><p>spring-webmvc-portlet:提供portlet的支持</p><h4 id="4：数据库模块"><a href="#4：数据库模块" class="headerlink" title="4：数据库模块"></a>4：数据库模块</h4><p>spring-jdbc:提供jdbc访问数据库的支持，包含Srping对数据库访问操作进行封装的所有类，它提供了一个DBC的抽象层，从而实现对其他厂商的支持。 </p><p>spring-tx：提供对事物的支持 </p><p>spring-orm:提供对象关系-映射的支持，使得Spring可以方便的整合 他第三方ORM库如JAP、Mybatis、Hibernate等</p><p>spring-oxm：提供对象xml映射支持</p><p>spring-jms：提供对java消息服务的支持</p><h3 id="三、Spring的入门程序"><a href="#三、Spring的入门程序" class="headerlink" title="三、Spring的入门程序"></a>三、Spring的入门程序</h3><h4 id="1-基于Java完成接口、实现类、方法的调用。"><a href="#1-基于Java完成接口、实现类、方法的调用。" class="headerlink" title="1.基于Java完成接口、实现类、方法的调用。"></a>1.基于Java完成接口、实现类、方法的调用。</h4><p>test：</p><pre class=" language-java"><code class="language-java">项目分层：控制层——调用服务层（用户操作控制层，发送url请求到控制层）服务层——调用Dao层Dao层——和数据库打交道</code></pre><p>1.在 src-&gt;main 下创建两个新文件夹并重命名为 Java 和 resources </p><p><img src="https://yovinchen-1308133012.cos.ap-beijing.myqcloud.com/image-20220301180826354.png" alt="image-20220301180826354"></p><p>2.右击名为 Java 的文件选择 Mark Directory as 属性中的 Sources Root （源根）</p><p><img src="https://yovinchen-1308133012.cos.ap-beijing.myqcloud.com/image-20220301223812386.png" alt="image-20220301223812386"></p><p>3.右击名为 resources 的文件选择 Mark Directory as 属性中的 Resources Root （源根）</p><p><img src="https://yovinchen-1308133012.cos.ap-beijing.myqcloud.com/image-20220301223743212.png" alt="image-20220301223743212"></p><p>4.在 Java 源包下创建名为 UserDao 接口、名为 UserDaoImpl 的 Java 以及Test测试类</p><p>代码分别如下</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// UserDao 接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// UserDaoImpl 实现类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserDao say..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Test 测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用say方法</span>       UserDao userDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       userDao<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="2-使用Spring框架完成接口对象的创建及方法的调用。"><a href="#2-使用Spring框架完成接口对象的创建及方法的调用。" class="headerlink" title="2.使用Spring框架完成接口对象的创建及方法的调用。"></a>2.使用Spring框架完成接口对象的创建及方法的调用。</h4><p>1.导包,在idea中的目录中的pom.xml下找到如照片代码并添加蓝色区域代码（和<dependency></dependency>标签同一级，都应该在<dependencies></dependencies>标签中）</p><p><img src="https://yovinchen-1308133012.cos.ap-beijing.myqcloud.com/image-20220301225430222.png" alt="image-20220301225430222"></p><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>context<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">4.3</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>完成导包后如图：</p><p><img src="https://yovinchen-1308133012.cos.ap-beijing.myqcloud.com/image-20220301230136985.png" alt="image-20220301230136985"></p><p>可能有部分同学导包的时候保存代码之后未下载，可以试一试重启idea应该可以解决下载问题</p><p>2.导包完成后在resources文件夹下建立 applicationContext.xml</p><p><img src="https://yovinchen-1308133012.cos.ap-beijing.myqcloud.com/image-20220301230431966.png" alt="image-20220301230431966"></p><p>3.并利用Spring框架创建com.wqx.UserDaoImpl类对象userDao，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userDao"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.gzh.UserDaoImpl"</span><span class="token operator">/</span><span class="token operator">></span></code></pre><p><img src="https://yovinchen-1308133012.cos.ap-beijing.myqcloud.com/image-20220302102447695.png" alt="image-20220302102447695"></p><h4 id="3-使用Spring框架创建的对象调用方法"><a href="#3-使用Spring框架创建的对象调用方法" class="headerlink" title="3.使用Spring框架创建的对象调用方法"></a>3.使用Spring框架创建的对象调用方法</h4><p>1.在 Test 测试类下输入代码：</p><pre class=" language-java"><code class="language-java">ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserDao userDao <span class="token operator">=</span> <span class="token punctuation">(</span>UserDao<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userDao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDao<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>点击运行，完成并输出：UserDao say…</p><p><img src="https://yovinchen-1308133012.cos.ap-beijing.myqcloud.com/image-20220302104836410.png" alt="image-20220302104836410"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
